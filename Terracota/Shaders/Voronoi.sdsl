// YerkoAndrei
namespace Shaders
{
    shader Voronoi<float fuerza, float densidad, float3 RGB> : ComputeColor, PositionStream4
    {
        override float4 Compute()
        {
            float4 color = float4((RGB.x / 255),(RGB.y / 255),(RGB.z / 255), 1);
            float v = Voronoi(streams.Position.xyz, fuerza, densidad);
            return float4(v,v,v,1) * color;
        }

        float Voronoi(float3 UV, float strength, float density)
        {
            float3 g = floor(UV * density);
            float3 f = frac(UV * density);
            float3 res = float3(1, 1, 0);

            for (int z = -1; z <= 1; z++)
            {
                for (int y = -1; y <= 1; y++)
                {
                    for (int x = -1; x <= 1; x++)
                    {
                        float3 lattice = float3(x, y, z);
                        float3 offset = RandomFloat3(lattice + g, strength);
                        float d = distance(lattice + offset, f);
                        if (d < res.x)
                        {
                            res = float3(d, offset.x, offset.y);
                        }
                    }
                }
            }
            // res.x Puntos
            // res.y Células
            return res.y;
        }

        float3 RandomFloat3(float3 UV, float offset)
        {
            float3x3 m = float3x3(15.27, 47.63, 99.41, 89.98, 23.45, 67.89, 12.34, 56.78, 90.12);
            UV = frac(sin(mul(UV, m)) * 46839.34);
            return float3
            (
                sin(UV.y * offset) * 0.5 + 0.5,
                cos(UV.x * offset) * 0.5 + 0.5,
                sin(UV.z * offset) * 0.5 + 0.5
            );
        }
    };
}
